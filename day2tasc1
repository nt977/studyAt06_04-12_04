package org.random.tests;

public class Sample {
    public static void main(String[] args) {
        Vector3D vector3D = new Vector3D(2,3,4);
        Vector3D vector3D1 = new Vector3D(3,4,5);

        Vector2D vector2D =new Vector2D(5,6);
        Vector2D vector2D1 =new Vector2D(7,8);

        System.out.println(vector3D.sumOfVector(vector3D1).toString());
        System.out.println(vector3D.subtractionOfVector(vector3D1).toString());
        System.out.println(vector3D.multiplicationVecOfVector(vector3D1));
        System.out.println(vector2D.sumOfVector(vector2D1).toString());
        System.out.println(vector2D.subtractionOfVector(vector2D1).toString());
        System.out.println(vector2D.multiplicationVecOfVector(vector2D1));
    }
}


package org.random.tests;

public abstract class AbstractVector {
}


package org.random.tests;

public abstract class AbstractVector2D extends AbstractVector{
    public abstract Vector2D sumOfVector(Vector2D vector);
    public abstract Vector2D subtractionOfVector(Vector2D vector);
    public abstract double multiplicationVecOfVector(Vector2D vector);
}


package org.random.tests;

public abstract class AbstractVector3D extends AbstractVector{
    public abstract Vector3D sumOfVector(Vector3D vector);
    public abstract Vector3D subtractionOfVector(Vector3D vector);
    public abstract double multiplicationVecOfVector(Vector3D vector);
}

package org.random.tests;

public class Vector2D extends AbstractVector2D {
    private double point1;
    private double point2;


    public Vector2D(double point1, double point2) {
        this.point1 = point1;
        this.point2 = point2;
    }

    public double getPoint1() {
        return point1;
    }

    public double getPoint2() {
        return point2;
    }

    @Override
    public Vector2D sumOfVector(Vector2D vector) {
        return new Vector2D(this.getPoint1() + vector.getPoint1(),
                this.getPoint2() + vector.getPoint2()
        );
    }

    @Override
    public Vector2D subtractionOfVector(Vector2D vector) {
        return new Vector2D(this.getPoint1() - vector.getPoint1(),
                this.getPoint2() - vector.getPoint2()
        );
    }

    @Override
    public double multiplicationVecOfVector(Vector2D vector) {
        return this.getPoint1() * vector.getPoint1() +
                this.getPoint2() * vector.getPoint2();
    }

    @Override
    public String toString() {
        return "Vector2D{" +
                "point1=" + point1 +
                ", point2=" + point2 +
                '}';
    }
}

package org.random.tests;


public class Vector3D extends AbstractVector3D {
    private double point1;
    private double point2;
    private double point3;

    public Vector3D(double point1, double point2, double point3) {
        this.point1 = point1;
        this.point2 = point2;
        this.point3 = point3;
    }

    public double getPoint1() {
        return point1;
    }

    public double getPoint2() {
        return point2;
    }

    public double getPoint3() {
        return point3;
    }

    @Override
    public Vector3D sumOfVector(Vector3D vector) {
        return new Vector3D(this.getPoint1() + vector.getPoint1(),
                this.getPoint2() + vector.getPoint2(),
                this.getPoint3() + vector.getPoint3()
        );
    }

    @Override
    public Vector3D subtractionOfVector(Vector3D vector) {
        return new Vector3D(this.getPoint1() - vector.getPoint1(),
                this.getPoint2() - vector.getPoint2(),
                this.getPoint3() - vector.getPoint3()
        );
    }

    @Override
    public double multiplicationVecOfVector(Vector3D vector) {
        return this.getPoint1() * vector.getPoint1() +
                this.getPoint2() * vector.getPoint2() +
                this.getPoint3() * vector.getPoint3();
    }

    @Override
    public String toString() {
        return "Vector3D{" +
                "point1=" + point1 +
                ", point2=" + point2 +
                ", point3=" + point3 +
                '}';
    }
}


